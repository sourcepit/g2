/**
 * <copyright> </copyright>
 * 
 * $Id$
 */

package org.sourcepit.emfx.codegen.ecore.genmodel2.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.sourcepit.emfx.codegen.ecore.genmodel2.GenModel2Package;
import org.sourcepit.emfx.codegen.ecore.genmodel2.util.GenModel2AdapterFactory;
import org.sourcepit.emfx.codegen.ecore.ui.GenModel2UiPlugin;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers. The adapters generated by this
 * factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}. The adapters
 * also support Eclipse property sheets. Note that most of the adapters are shared among multiple instances. <!--
 * begin-user-doc --> <!-- end-user-doc -->
 * 
 * @generated
 */
public class GenModel2ItemProviderAdapterFactory extends GenModel2AdapterFactory
   implements
      ComposeableAdapterFactory,
      IChangeNotifier,
      IDisposable,
      IChildCreationExtender
{
   /**
    * This keeps track of the root adapter factory that delegates to this adapter factory. <!-- begin-user-doc --> <!--
    * end-user-doc -->
    * 
    * @generated
    */
   protected ComposedAdapterFactory parentAdapterFactory;

   /**
    * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}. <!-- begin-user-doc --> <!--
    * end-user-doc -->
    * 
    * @generated
    */
   protected IChangeNotifier changeNotifier = new ChangeNotifier();

   /**
    * This helps manage the child creation extenders. <!-- begin-user-doc --> <!-- end-user-doc -->
    * 
    * @generated
    */
   protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(
      GenModel2UiPlugin.INSTANCE, GenModel2Package.eNS_URI);

   /**
    * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}. <!--
    * begin-user-doc --> <!-- end-user-doc -->
    * 
    * @generated
    */
   protected Collection<Object> supportedTypes = new ArrayList<Object>();

   /**
    * This constructs an instance. <!-- begin-user-doc --> <!-- end-user-doc -->
    * 
    * @generated
    */
   public GenModel2ItemProviderAdapterFactory()
   {
      supportedTypes.add(IEditingDomainItemProvider.class);
      supportedTypes.add(IStructuredItemContentProvider.class);
      supportedTypes.add(ITreeItemContentProvider.class);
      supportedTypes.add(IItemLabelProvider.class);
      supportedTypes.add(IItemPropertySource.class);
   }

   /**
    * This keeps track of the one adapter used for all {@link org.sourcepit.emfx.codegen.ecore.genmodel2.GenModel2}
    * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
    * 
    * @generated
    */
   protected GenModel2ItemProvider genModel2ItemProvider;

   /**
    * This creates an adapter for a {@link org.sourcepit.emfx.codegen.ecore.genmodel2.GenModel2}. <!-- begin-user-doc
    * --> <!-- end-user-doc -->
    * 
    * @generated
    */
   @Override
   public Adapter createGenModel2Adapter()
   {
      if (genModel2ItemProvider == null)
      {
         genModel2ItemProvider = new GenModel2ItemProvider(this);
      }

      return genModel2ItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.sourcepit.emfx.codegen.ecore.genmodel2.GenClass2}
    * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
    * 
    * @generated
    */
   protected GenClass2ItemProvider genClass2ItemProvider;

   /**
    * This creates an adapter for a {@link org.sourcepit.emfx.codegen.ecore.genmodel2.GenClass2}. <!-- begin-user-doc
    * --> <!-- end-user-doc -->
    * 
    * @generated
    */
   @Override
   public Adapter createGenClass2Adapter()
   {
      if (genClass2ItemProvider == null)
      {
         genClass2ItemProvider = new GenClass2ItemProvider(this);
      }

      return genClass2ItemProvider;
   }

   /**
    * This keeps track of the one adapter used for all {@link org.sourcepit.emfx.codegen.ecore.genmodel2.GenPackage2}
    * instances. <!-- begin-user-doc --> <!-- end-user-doc -->
    * 
    * @generated
    */
   protected GenPackage2ItemProvider genPackage2ItemProvider;

   /**
    * This creates an adapter for a {@link org.sourcepit.emfx.codegen.ecore.genmodel2.GenPackage2}. <!-- begin-user-doc
    * --> <!-- end-user-doc -->
    * 
    * @generated
    */
   @Override
   public Adapter createGenPackage2Adapter()
   {
      if (genPackage2ItemProvider == null)
      {
         genPackage2ItemProvider = new GenPackage2ItemProvider(this);
      }

      return genPackage2ItemProvider;
   }

   /**
    * This returns the root adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
    * 
    * @generated
    */
   public ComposeableAdapterFactory getRootAdapterFactory()
   {
      return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
   }

   /**
    * This sets the composed adapter factory that contains this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
    * 
    * @generated
    */
   public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
   {
      this.parentAdapterFactory = parentAdapterFactory;
   }

   /**
    * <!-- begin-user-doc --> <!-- end-user-doc -->
    * 
    * @generated
    */
   @Override
   public boolean isFactoryForType(Object type)
   {
      return supportedTypes.contains(type) || super.isFactoryForType(type);
   }

   /**
    * This implementation substitutes the factory itself as the key for the adapter. <!-- begin-user-doc --> <!--
    * end-user-doc -->
    * 
    * @generated
    */
   @Override
   public Adapter adapt(Notifier notifier, Object type)
   {
      return super.adapt(notifier, this);
   }

   /**
    * <!-- begin-user-doc --> <!-- end-user-doc -->
    * 
    * @generated
    */
   @Override
   public Object adapt(Object object, Object type)
   {
      if (isFactoryForType(type))
      {
         Object adapter = super.adapt(object, type);
         if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter)))
         {
            return adapter;
         }
      }

      return null;
   }

   /**
    * <!-- begin-user-doc --> <!-- end-user-doc -->
    * 
    * @generated
    */
   public List<IChildCreationExtender> getChildCreationExtenders()
   {
      return childCreationExtenderManager.getChildCreationExtenders();
   }

   /**
    * <!-- begin-user-doc --> <!-- end-user-doc -->
    * 
    * @generated
    */
   public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain)
   {
      return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
   }

   /**
    * <!-- begin-user-doc --> <!-- end-user-doc -->
    * 
    * @generated
    */
   public ResourceLocator getResourceLocator()
   {
      return childCreationExtenderManager;
   }

   /**
    * This adds a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
    * 
    * @generated
    */
   public void addListener(INotifyChangedListener notifyChangedListener)
   {
      changeNotifier.addListener(notifyChangedListener);
   }

   /**
    * This removes a listener. <!-- begin-user-doc --> <!-- end-user-doc -->
    * 
    * @generated
    */
   public void removeListener(INotifyChangedListener notifyChangedListener)
   {
      changeNotifier.removeListener(notifyChangedListener);
   }

   /**
    * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}. <!-- begin-user-doc --> <!--
    * end-user-doc -->
    * 
    * @generated
    */
   public void fireNotifyChanged(Notification notification)
   {
      changeNotifier.fireNotifyChanged(notification);

      if (parentAdapterFactory != null)
      {
         parentAdapterFactory.fireNotifyChanged(notification);
      }
   }

   /**
    * This disposes all of the item providers created by this factory. <!-- begin-user-doc --> <!-- end-user-doc -->
    * 
    * @generated
    */
   public void dispose()
   {
      if (genModel2ItemProvider != null)
         genModel2ItemProvider.dispose();
      if (genClass2ItemProvider != null)
         genClass2ItemProvider.dispose();
      if (genPackage2ItemProvider != null)
         genPackage2ItemProvider.dispose();
   }

}
